'use strict';

function SampleController( $scope, $injector, $log, $state, ServiceFactory ) {
    /**
     * Injeta os métodos, atributos e seus estados herdados de AbstractController.
     * @see AbstractController
     */

    $injector.invoke(AbstractController, this, {$scope: $scope});

    $scope.$on('ngGridEventSorted', function(event, sort) {

        // compara os objetos para garantir que o evento seja executado somente uma vez q não entre em loop
        if ( !angular.equals(sort, $scope.gridOptions.sortInfo) ) {
            $scope.gridOptions.sortInfo = angular.copy(sort);

            $scope.currentPage.sort.direction = sort.directions[0].toUpperCase();
            $scope.currentPage.sort.property = sort.fields[0];

            //$scope.listSampleByFilters();
        }
    });

    $scope.ServiceFactory = ServiceFactory;
    /*-------------------------------------------------------------------
     * 		 				 	ATTRIBUTES
     *-------------------------------------------------------------------*/

    //STATES
    /**
     * Variável estática que representa
     * o estado de listagem de registros.
     */
    $scope.LIST_STATE = "sample.listar";
    /**
     * Variável estática que representa
     * o estado de detalhe de um registro.
     */
    $scope.DETAIL_STATE = "sample.detalhe";
    /**
     * Variável estática que representa
     * o estado para a criação de registros.
     */
    $scope.INSERT_STATE = "sample.criar";

    /**
     * Variável estática que representa
     * o estado para a edição de registros.
     */
    $scope.UPDATE_STATE = "sample.editar";

    /**
     * Variável que armazena o estado corrente da tela.
     * Esta variável deve SEMPRE estar de acordo com a URL
     * que estão no browser.
     */
    $scope.currentState = "sample.criar";

    /**
     * Armazena a entitidade corrente para edição ou detalhe.
     */
    $scope.currentEntity;


    /**
     * Armazena a entitidade corrente para edição ou detalhe.
     */
    $scope.currentFilter;


    /**
     * Variável que armazena o estado da paginação
     * para renderizar o pager e também para fazer as requisições das
     * novas páginas, contendo o estado do Sort incluído.
     *
     * @type PageRequest
     */
    $scope.currentPage = {
        page:{
            content: new Array(),
            page: 1
        }
    };
    /*-------------------------------------------------------------------
     * 		 				 	  NAVIGATIONS
     *-------------------------------------------------------------------*/
    /**
     * Método principal que faz o papel de front-controller da tela.
     * Ele é invocado toda vez que ocorre uma mudança de URL (@see $stateChangeSuccess),
     * quando isso ocorre, obtém o estado através do $state e chama o método inicial daquele estado.
     * Ex.: /list -> changeToList()
     *      /criar -> changeToInsert()
     *
     * Caso o estado não for encontrado, ele direciona para a listagem,
     * apesar que o front-controller do angular não deixa digitar uma URL inválida.
     */
    $scope.initialize = function( toState, toParams, fromState, fromParams ) {
        var state = $state.current.name;

        switch (state) {
            case $scope.LIST_STATE: {
                $scope.changeToList();
            }
                break;
            case $scope.DETAIL_STATE: {
                $scope.changeToDetail( $state.params.id );
            }
                break;
            case $scope.INSERT_STATE: {
                $scope.changeToInsert();
            }
                break;
            case $scope.UPDATE_STATE: {
                $scope.changeToUpdate( $state.params.id );
            }
                break;
            default : {
                $state.go( $scope.LIST_STATE );
            }
        }
    };

    $scope.changeToList = function() {
        $log.info("changeToList");

        $scope.currentState = $scope.LIST_STATE;
    };

    $scope.changeToInsert = function() {

        $log.info("changeToInsert");

        $scope.currentState = $scope.INSERT_STATE;

    };

    $scope.changeToUpdate = function( id, state ) {
        $log.info("changeToUpdate", id);

        $scope.ServiceFactory.call("EquipamentoService", "findById", $scope.currentEntity, function(data){

                $scope.currentState = $scope.UPDATE_STATE;

            },
            function(data){
                console.log(data);
            });
    };

    $scope.changeToDetail = function( id, state ) {
        $log.info("changeToDetail", id);

        $scope.ServiceFactory.call("SampleService", "findById", $scope.currentEntity, function(data){


                $scope.currentEntity = data;

                $scope.currentState = $scope.DETAIL_STATE;

            },
            function(data){
                console.log(data);
            });
    };


    /**
     * Realiza os procedimentos iniciais (prepara o estado)
     * para a tela de exclusão.
     *
     * Antes de excluir, o usuário notificado para confirmação
     * e só então o registro é excluido.
     * Após exclusão, atualizamos a grid com estado de filtro, paginação e sorting.
     */
    $scope.changeToRemove = function( sample ) {
        $log.info("changeToRemove", sample);

    };




};